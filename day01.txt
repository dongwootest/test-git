
    Git
        소스 코드 버전 관리 시스템

        프로젝트 개발
        v0.1 --- 서비스 중 <--- 직접적으로 업데이트 ?

        staging(v0.2) --- 기능 추가 --- 테스트 -- QA -- 업데이트



        1. 병렬적 개발 가능
        2. 개발 간에 있었던 이슈 공유 및 기록
        3. git action - CI/CD(보류)
        4. 소스 코드 버전 관리
        5. 협업 시스템 (코드 리뷰, 칸반 보드, 백로그)




        git은 소스 코드 버전 관리를 넘어 하나의 커다란 협업 시스템

-----------------------------------------------------------------------------------

        conflict * 충돌상황 *

            저장공간과 각 기능은 합별(merge)할 때
            다른 사람이 수정한 부분과 내가 수정한 부분이 같다면
            conflict가 발생할 수 있다.

            git은 이를 감지하여 충돌 상황으로 이해하고
            충돌을 해결하고 merge 할 수 있도록 병렬적 개발 시스템을 지원

        이슈 트래거
            개발 간에 있었던 이슈(오류 해결, 오류 미해결) 공유 및 기록

        CI/CD (Continuos Inergration/Continuos Deploy)
            지속적인 통합과 지속적인 배포

            개발한 코드를 사용자가 사용하기 위해서는
            24시간 돌아가고있는 컴퓨터(server)에 접근하여 해당 코드를
            다운로드 받아야하는데

            코드를 개발하고 해당 컴퓨터에 코드를 저장하기 까지의 과정을
            자동화하는 과정 => CI/CD
            gitHub에서는 git action을 통해 여러분들이 등록해놓은
            명령어를 실행함으로써 해당 과정을 자동화할 수 있다

-----------------------------------------------------------------------------------

        gitHub

            Git을 로컬 환경이 아닌 원격 저장소로서
            저장할 수 있도록 UI를 지원하는 서비스

            원격 저장이 가능하므로 다른 사람의 코드를 내가 직접 보고
            확인할 수 있다는 장점이 있고 현재는 이러한 장점으로 인해

            세계 최대 개발자 커뮤니티
            
            => git을 웹사이트에 활용할 수 있도록 원격 저장소 역할

-----------------------------------------------------------------------------------

    원격 저장소와 로컬 저장소
    (git vs gitHub)

    1. 내가 버전관리하고 싶은 프로젝트(폴더)를 찾아야한다

        cd 하위 폴더명
        cd ..
        cd 절대경로
        
    2. 해당 폴더에 로컬 저장소(.git) 생성
        git init

    3. 원격 저장소 생성
        gitHub -> repository -> new

    4. 로컬 저장소와 원격 저장소를 연결
        remote add

 ----------------------------------------------------------------------------------- 최초 1회

    5. 코드 작성 및 개발

    6. 내 로컬 저장소에 저장하고 싶은 코드를 스테이징(준비)
        git add

    7. 내 로컬 저장소에 저장 내역을 기록(commit)
        git commit

    8. 로컬 저장소에 저장된 코드를 원격 저장소로 전송(push)
        git push

    8-1 원격 저장소에 push하기 위해서 조건이 있는데
        현재 내가 데이터를 올리려 하는 저장소와 최신화(동기화)
        -> repository에 올라가있는 코드를 다운로드 받아 최신화

        git pull

-----------------------------------------------------------------------------------

    git 명령어

        git init
            - 로컬 저장소 생성(.git)
            * 주의 사항
                터미널에 내가 올리고 싶은 폴더 경로 맞추고 나서 생성

            ex) cd 폴더 경로

        git remote

            1) git remote
                현재 로컬 저장소와 연결된 원격 저장소의 목록

            2) git remote add [원격저장소명][원격저장소주소]
                ex) git remote add git명 https://gitHub.com/abc/abc
                원격 저장소와 로컬 저자소를 연결

            3) git remote remove [원격저장소명][원격저장소주소]
                연결된 원격 저장소 삭제

-----------------------------------------------------------------------------------

    git add .
        모든 파일을 스테이징
        * 주의사항(띄어쓰기)
            git add .

        git add 파일명
            내가 올리고 싶은 파일만 스테이징(준비)

-----------------------------------------------------------------------------------

    git commit
        로컬 저장소에 내가 올리고 싶은 파일을 저장
        커밋을 하게 되면 일종의 해쉬화된 코드가 부여

        향후 코드를 사용하여
        내가 원하는 커밋 시점으로 돌아가거나 해당 커밋만 따로 선택할 수 있다

        --amend
        최근의 git commit 내역을 현재 commit으로 덮어씌운다(수정)

        ex)
        git commit -m 'head(title)' -m 'body(content)' -m 'footer(annotation)'

        git commit -m 'feat : login api' -m '로그인 api를 추가였습니다'
        git commit -m 'asd' -m 'asd asd'

    깃허브 커밋 컨벤션

        기능 추가 (feat)
        기능 수정(fixed)

-----------------------------------------------------------------------------------

    commit 컨밴션, git flow, 실습
    호스팅, 배포

    이번주 과제 --> 배포할 수 있는 웹 사이트 1페이지 제작
                   배포 후 주소 공유