

    ----------------------------------------------------------

    git push 원격저장소명 브렌치명

        ex) git push origin main
        로컬 저장소의 커밋 내역을 원격 저장소에 전송

    ----------------------------------------------------------

    git pull 원격저장소명 브랜치명

        ex) git pull origin main
        원격 저장소의 코드와 내 로컬의 코드를 동기화

    ----------------------------------------------------------

    git cherry-pick hash-commit-number

        특정 커밋을 선택하여 가져올 수 있는 명령어

    git reset hash-commit-number

        특정 커밋으로 되돌아가는 명령어

    git revert hash-commit-number

        현재에서 특정 커밋을 삭제하는 명령어

    ----------------------------------------------------------

    branch(가지)

        분기점

        main(master, release) : default branch
        dev(test, staging) : development branch
    
    생성

    브랜치는 분기점이 시작되는 코드의 복사본이며 가지처럼 분기점으로부터 늘어난다 해서
    브랜치라고 부르며, 브랜치명은 내 마음대로 정해도 되지만 버전관리를 위하여 컨벤션이 존재

    feat/auth
    style/event-screen

    ----------------------------------------------------------

    git merge 브랜치명
        서로 다른 브랜치 코드를 합병, 충돌이 발생, 충돌을 해결해야만 merge가 가능
        브랜치가 합병되었으면 로컬 저장소에서도 삭제, 원격 저장소에서도 삭제

    ----------------------------------------------------------

    커밋 컨밴션

    버전 관리를 위해 내가 아닌 다른 협업자가 어떤 코드를 커밋 했는지
    쉽게 트래킹할 수 있도록 규칙을 정해놓는 것

    https://gist.github.com/joshbuchea/6f47e86d2510bce28f8e7f42ae84c716

    feat : 새로운 기능
    fix : 버그 수정
    docs : 문서 수정
    style : 레이아웃, 코드 스타일 수정
    refactor : 기능, 코드 개선
    test : 테스크 추가/수정
    chore : 프로덕션 외 다른 코드 수정

    ex)
        feat : 로그인 로직을 추가하였습니다.
        
        로그인 버튼을 누르면 로그인 성공하면 메인 페이지로 이동
        로그인이 실패하였으면 알람창을 띄웠습니다.

        // 깃모지
        🍉🍓🍎🍌🐱🐾🐈
        

    ----------------------------------------------------------

    git flow

        1. git init 로컬 저장소 생성
        2. github repository 원격 저장소 생성
        3. 로컬 저장소와 원격저장소를 연결

        ---------------------------------------------------------- 최초 1회

        4. init 폴더 구조 생성 init add -> commit -> push
        4-1. git pull, git clone을 통해 원격 저장소에 있는 코드 동기화(협업자)

        ----------------------------------------------------------

        5. 분기점 생성(branch)

            git branch
                - 현재 내 로컬 환경에 만들어진 branch 목록 확인

            git branch 브랜치명
                - 해당 브랜치가 내 로컬 환경에 생성

            git branch -D 브랜치명
                -해당 브랜치 내 로컬 환경에서 삭제
                
            git checkout 브랜치명
                -현재 내 로컬 환경에서 바라보고 있는 브랜치 변경(브랜치 이동)
                -단, 브랜치 이동을 위해서는 커밋 되지 않은 변경 내역이 x

                git stash
                    현재 변경된 내용을 저장소에 보관 필요할 때 가져다 쓸 수 있도록
                    => 브랜치 이동 전에 변경 내용 커밋 x -> 잠시 보관

                git stash pop
                git stash apply hash-code

            git checkout -b 브랜치명
                - 브랜치 생성과 이동을 동시에 하는 명령어

        6. 코드 개발 ... 저장 -> add -> commit -> push(--> pull, 동기화)

        7. 완료 -> default branch 혹은 상위 branch에 merge
        
    ----------------------------------------------------------

    실습

    github 최초 사용시 1회만

        git config --global user.name "깃허브 닉네임"
        git config --global user.email "email" <-- 로그인 할 때 이메일

        잘 등록되었는지 확인
        git config --list

    ----------------------------------------------------------

    호스팅

